
### 문제 풀어보기

** 조건 **

3. 유효성 검사에 어긋날 경우 실시간으로 아래에 에러 메세지를 보여야합니다.  ✅
4. 유효성 검사에 어긋날 경우 다음 화면으로 넘어갈 수 없습니다. ✅
5. 각 단계는 하나의 페이지 컴포넌트로 이루어지며 각 단계 이외의 데이터를 입력할 수 없습니다. ✅
2. 뒤로가기가 눌러지면 이전 폼의 데이터가 그대로 유지되어 있어야합니다. ✅
1. 회원가입 버튼을 누르면 이전 단계에서 작성했던 모든 데이터가 alert에 노출되어야 합니다. ✅





### 생각해보기

(1) RHF를 사용했을 때의 장점에 대하여 정의하기

    1. 제어 컴포넌트를 사용할 때 보다 훨씬 적은 코드로 훨씬 더 나은 성능을 경험할 수 있게 해주는 라이브러리
        비제어 컴포넌트의 장점은 그대로 살리면서 제어 컴포넌트에서만 다룰 수 있는 실시간 유효성 검사, 
        실시간 동기화 등의 API를 제공하여 실시간 유효성 검사 및 동기화를 가능하게 해준다. 
    2. 리렌더링을 최소화시켜 마운팅 속도를 높여줌
    3. 종속성이 없는 작은 사이즈의 라이브러리 (공식 홈페이지에 super light라고 표기되어 있음)
    4. 타입스크립트를 기본으로 제공한
    5. 정말 친절한 공식문서
    6. 지속적인 업데이트
    7. 많은 유저의 사용
        비슷한 form 관리 라이브러리들과 비교했을 때 가장 높은 다운로드 수를 자랑 


(2) 만약 유효성 검사를 하지 않는 곳에서 RHF를 사용하는 것은 올바른 행위일까?

    여전히 올바른 행위라고 봅니다.
    
    1. 일관성: 동일한 프로젝트 내에서 모든 폼을 동일한 방식으로 처리하면 코드의 일관성이 유지됩니다. 
        이는 유지 보수를 용이하게 하고, 새로운 개발자들이 프로젝트에 쉽게 참여할 수 있게 합니다.

    2. 확장성: 처음에는 유효성 검사가 필요 없을 수 있지만, 나중에 요구 사항이 변경되어 유효성 검사가 필요해질 수 있습니다. 
        RHF를 사용하면 나중에 이러한 기능을 쉽게 추가할 수 있습니다.

    3. 기능성: RHF는 유효성 검사 이외에도 다양한 기능을 제공합니다. 
        예를 들어, 폼 상태 관리, 입력 필드에 대한 자동 등록, 성능 최적화 등이 있습니다. 
        이러한 기능들은 폼을 더 효율적으로 만들 수 있습니다.

        그러나, 만약 프로젝트에서 RHF의 고급 기능이나 유효성 검사 기능을 전혀 사용하지 않을 계획이라면, 
        더 간단한 폼 라이브러리나 심지어는 React의 기본 기능만을 사용하는 것이 더 나을 수도 있습니다. 
        이는 프로젝트의 복잡성을 줄이고, 필요하지 않은 의존성을 피할 수 있게 합니다.

        결국, RHF를 사용할지 여부는 프로젝트의 요구 사항, 팀의 선호도, 그리고 향후 확장 계획을 고려하여 결정해야 합니다.


(3) RHF에는 register 말고 contoller를 활용하는 방법이 있습니다. 두 방법의 차이는 무엇일까?

register와 controller 모두 폼 요소를 등록하고 폼 상태를 제어하는 데 사용


1. register 함수
    - 단순한 폼 상태 관리가 주요 목적인 경우 사용
    - 직접적으로 폼 요소를 등록할 때 사용
    - 직접적인 등록으로 렌더링 효율이 좋음
    - 사용자 정의 요소에 적용 가능 (자유도가 높음)
    - 작은 규모의 폼에서 유리

2. controller 함수 
    - 커스텀 컴포넌트와의 연동이 많은 경우 사용
    - 주로 외부 라이브러리와 통합할 때 유용
    - 컴포넌트 간의 상태를 쉽게 전달
    - 큰 규모의 폼이나 동적인 상황에서 유리
    - 사용자 정의 요소에 적용하기 어렵


| conclusion
React Hook Form에서의 Controller 함수와 Register 함수 중에서 선택해야 할 때, 대부분의 상황에서는 Controller 함수를 사용하는 것이 권장하고 있습니다.
일관성, 코드 통일화, 그리고 프로젝트의 확장성을 고려할 때, Controller 함수를 사용하여 React Hook Form을 구현하는 것이 좋습니다. 





references : 
https://velog.io/@jellyjw/React-hook-form-%EC%99%9C-%EC%93%B8%EA%B9%8C-%EC%84%B8%EA%B0%9C%EC%9D%98-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%A0%81%EC%9A%A9%EA%B8%B0
https://toby2009.tistory.com/56